import { useEffect, useState } from 'react'
import { collection, doc, getDoc, getDocs, addDoc, serverTimestamp, query, where, orderBy } from 'firebase/firestore'
import { db, ensureAnon } from './firebase'
import Header from './components/Header'
import Login from './components/Login'
import Catalog from './components/Catalog'
import CartDrawer from './components/CartDrawer'
import OrderHistory from './components/OrderHistory'
import SyncToast from './components/SyncToast'
import './styles.css'
function usePWA(){useEffect(()=>{'serviceWorker'in navigator&&navigator.serviceWorker.register('/sw.js')},[])}
export default function App(){usePWA();const[store,setStore]=useState(null);const[products,setProducts]=useState([]);const[cart,setCart]=useState([]);const[openCart,setOpenCart]=useState(false);const[orders,setOrders]=useState([]);const[syncing,setSyncing]=useState(false);const basePercent=store?.baseDiscountPercent||0;const coupons=store?.coupons||[];useEffect(()=>{ensureAnon()},[]);function onLogin({storeId,pin}){getDoc(doc(db,'stores',storeId)).then(s=>{if(!s.exists())return alert('فروشگاه یافت نشد');const d=s.data();if(String(d.pin)!==String(pin))return alert('PIN نادرست');setStore({id:storeId,...d})})}
useEffect(()=>{if(!store)return;getDocs(query(collection(db,'products'),where('active','==',true))).then(s=>setProducts(s.docs.map(d=>({id:d.id,...d.data()}))));getDocs(query(collection(db,'orders'),where('storeId','==',store.id),orderBy('createdAt','desc'))).then(s=>setOrders(s.docs.map(d=>({id:d.id,...d.data(),shortId:d.id.slice(-6).toUpperCase()}))))},[store]);const onAdd=p=>{setCart(prev=>{const ex=prev.find(i=>i.id===p.id);if(ex)return prev.map(i=>i.id===p.id?{...i,qty:i.qty+1}:i);return[...prev,{id:p.id,name:p.name,price:p.price,qty:1}]})};const onInc=id=>setCart(prev=>prev.map(i=>i.id===id?{...i,qty:i.qty+1}:i));const onDec=id=>setCart(prev=>prev.map(i=>i.id===id?{...i,qty:Math.max(1,i.qty-1)}:i));const onSubmit=async({couponCode,couponPercent,totals})=>{if(!navigator.onLine){const order={offline:true,id:crypto.randomUUID(),storeId:store.id,items:cart,totals,couponCode,couponPercent,createdAt:Date.now()};const{queueOrder}=await import('./lib/offlineQueue.js');await queueOrder(order);setCart([]);setOpenCart(false);alert('سفارش آفلاین ثبت شد');return}setSyncing(true);try{const ref=await addDoc(collection(db,'orders'),{storeId:store.id,items:cart,totals,couponCode:couponCode||null,couponPercent:couponPercent||0,status:'pending',createdAt:serverTimestamp()});setOrders([{id:ref.id,shortId:ref.id.slice(-6).toUpperCase(),items:cart,totals,status:'pending',createdAt:Date.now()},...orders]);setCart([]);setOpenCart(false);alert('سفارش ثبت شد')}finally{setSyncing(false)}};useEffect(()=>{const sendQueued=async()=>{const{readQueue,clearQueue}=await import('./lib/offlineQueue.js');const q=await readQueue();if(!q.length||!navigator.onLine)return;setSyncing(true);try{for(const it of q){await addDoc(collection(db,'orders'),{storeId:it.storeId,items:it.items,totals:it.totals,couponCode:it.couponCode||null,couponPercent:it.couponPercent||0,status:'pending',createdAt:serverTimestamp()})}await clearQueue()}finally{setSyncing(false)}};window.addEventListener('online',sendQueued);sendQueued();return()=>window.removeEventListener('online',sendQueued)},[store]);if(!store)return <Login onSubmit={onLogin}/>;return(<div className='max-w-4xl mx-auto pb-24'><Header store={store} cartCount={cart.reduce((a,b)=>a+b.qty,0)} onOpenCart={()=>setOpenCart(true)}/><main className='p-4 space-y-6'><section><h2 className='font-bold mb-2'>کاتالوگ محصولات</h2><Catalog products={products} onAdd={onAdd} baseDiscount={basePercent}/></section><section><h2 className='font-bold mb-2'>سفارش‌های من</h2><OrderHistory orders={orders}/></section></main><CartDrawer open={openCart} onClose={()=>setOpenCart(false)} cart={cart} onInc={onInc} onDec={onDec} onSubmit={onSubmit} basePercent={basePercent} coupons={coupons}/><SyncToast syncing={syncing}/></div>)}